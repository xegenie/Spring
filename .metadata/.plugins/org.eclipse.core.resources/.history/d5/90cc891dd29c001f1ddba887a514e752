package com.aloha.spring.controller;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.aloha.spring.dto.Board;

@Controller		// Controller로 지정하고 빈 등록
@RequestMapping("/request")
public class RequestController {
	// log 객체
	private static final Logger logger = LoggerFactory.getLogger(RequestController.class);
	
	/**
	 * @RequestMapping : 요청 경로 매핑
	 * - /request/board 로 요청
	 * - /request/board.jsp 응답
	 * @return
	 */
	@RequestMapping(value = "/board", method = RequestMethod.GET) // POST 안됨
//	@RequestMapping("/request/board")
//	@RequestMapping("/board")
	public String request() {
		logger.info("[GET] - /request/board");
		return "request/board";
	}
	
	/**
	 * 경로 패턴 매핑
	 * @param no
	 * @return
	 */
	@RequestMapping(value = "/board/{no}", method = RequestMethod.GET)
	public String requestPath(@PathVariable("no") int no) {
		
		logger.info("[GET] - /request/board/{no}");
		logger.info("no : " + no );
		
		return "request/board";
		
	}
	
	/**
	 * 요청 메소드 매핑
	 * @return
	 */
	@ResponseBody // 메소드의 반환 값을, 요청 본문에 직접 담도록 지정
	@RequestMapping(value = "/board", method = RequestMethod.POST)
	public String requestPost(@RequestParam("no") int no) {
	
		logger.info("[POST] - /request/board");
		logger.info("no : " + no);
		
		return "SUCCESS - no(번호) : " + no;
		
	}
	
	/**
	 * 파라미터 매핑 
	 * @param id
	 * @return
	 * * params 속성으로 요청 파라미터가 id가 있는 경우를 매핑 조건으로 지정한다.
	 * * /request/board?id=aloha
	 */
	@RequestMapping(value = "/board", method = RequestMethod.GET, params = "id")
	public String requestParams(String id) {
		
		logger.info("[GET] - /request/board?id=" + id);
		logger.info("id : " + id);
		
		return "request/board";
		
	}
	
	/**
	 * 헤더 매핑
	 * @return
	 * * headers = "헤더명 = 값"으로 지정하여 헤더를 매핑조건으로 지정한다
	 */
	@ResponseBody
	@RequestMapping(value = {"/board", "/board2"}, method = RequestMethod.POST
					, headers = "Content-Type=application/json")
				 // , headers = {"Content-Type=application/json", "헤더2", "헤더3"})
	public String requestHeader() {
		
		logger.info("[POST] - /request/board");
		logger.info("헤더 매핑...");
		
		return "SUCCESS";
		
	}
	
	/**
	 * PUT 매핑
	 * @return
	 * 
	 * @ResponseBody O : return "데이터"; --> 응답 메세지(본문 : 데이터)
	 * @ResponseBody X : return "화면 이름"; --> 뷰 리졸버가 jsp 선택 -> 렌더링 -> html 응답
	 */
	@RequestMapping(value = "/board", method = RequestMethod.PUT)
	public String requestPut() {
		
		logger.info("[PUT] - request/board");
		return "redirect:/"; 	// 메인화면으로 리다이렉트
		
	}
	
	/**
	 * 컨텐츠 타입 매칭
	 * - Content-Type 헤더의 값으로 매핑
	 * - consumes = "컨텐츠타임값"
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/board", method = RequestMethod.POST
					, consumes = "application/xml")
	public String requestContentType() {
		
		logger.info("[POST] - /board/request");
		logger.info("컨텐츠 타입 매핑");
		
		return "SUCCESS";
		
	}
	
	/**
	 * Accept 매핑
	 * - Accept 헤더의 값으로 매핑
	 * - Accept 헤더 ?
	 * 	: 응답 받을 컨텐츠 타입을 서버에게 알려주는 헤더
	 * - porduces = "컨텐츠 타입"
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/board", method = RequestMethod.POST
				   , produces = "application/json")
	public String requestAccept() {
	
		logger.info("[POST] - /request/board");
		logger.info("Accept 매핑...");
		return "SUCCESS - Accept 매핑..."; 
	}

//	-------------------- [ 요청 경로 매핑 ] ----------------
	
	
	
//	--------------------- [ 요청  처리 ] --------------------

	/**
	 * 요청 헤더 가져오기 
	 * @return
	 * * @RequestHeader("헤더명") 타입 변수명
	 */
	@ResponseBody
	@RequestMapping(value = "/header", method = RequestMethod.GET)
	public String header(@RequestHeader("Accept") String accept,
						 @RequestHeader("User-Agent") String userAgent,
						 HttpServletRequest request) {
		
		logger.info("[GET] - /request/header");
		logger.info("@RequestHeader를 통한 헤더 정보 가져오기");
		logger.info("Accept - " + accept);
		logger.info("User-Agent - " + userAgent);
		
		// request 객체로부터 헤더 가져오기
		String requestAccept = request.getHeader("Accept");
		String requestUserAgent = request.getHeader("User-Agent");
		logger.info("request 객체로부터 헤더 정보 가져오기");
		logger.info("Accept - " + requestAccept);
		logger.info("User-Agent - " + requestUserAgent);
		
		return "SUCCESS";
		
	}
	
	/**
	 *  요청 본문 가져오기
	 * @param board
	 * @return
	 * * @RequestBody
	 * 	: HTTP 요청 메세지의 본문(body) 내용을 객체로 변환하는 어노테이션
	 * 	클라이언트에서 json 형식으로 보낸 데이터를 개체로 변환하기 위해 사용한다.
	 * 	* 생략가능(주로 생략하고 씀)
	 * 
	 *  415 에러 - 지원되지 않는 미디어 타입
	 *  (Unsupported Media Type)
	 *   : 클라이언트가 보낸 컨텐츠 타입의 요청을 서버가 처리할 수 없을 때 발생하는 에러
	 *   [클라이언트] (application/x-www-form-urlencoded) - 기본값
	 *   	 ↓
	 *   [ 서  버 ] (application/json)
	 *   * @RequestBody 를 쓰면, 본문의 컨텐츠 타입을 application/json을 기본으로 지정
	 *   
	 *   * 비동기 또는 thunder client 로 테스트 가능
	 *   Content-Type : application/json
	 *   body { "title" : "제목", "writer" : "작성자", "content" : "내용"}
	 */
	@ResponseBody
	@RequestMapping(value = "/body", method = RequestMethod.POST)
	public String requestBody(@RequestBody Board board) {
		logger.info("[POST] - /request/body");
		logger.info(board.toString());
		
		return "SUCCESS";
	}
	/**
	 *  체크박스 데이터 가져오기	
	 * @param hobbies
	 * @return
	 * * 체크박스 다중 데이터는 배열로 전달 받을 수 있다.
	 * * 같은 이름의 요청 파라미터(name)들은 배열 또는 리스트로 전달 받을 수 있다.
	 */
	@ResponseBody
	@RequestMapping(value = "/check", method = RequestMethod.POST)
	public String requestCheck(@RequestParam("hobby") String[] hobbies) {
		logger.info("[POST] - /request/check");
		
		for (String hobby : hobbies) {
			logger.info("hobby : " + hobby);
		}
		
		return "SUCCESS";
	}
	
	// date 데이터 가져오기
	@ResponseBody
	@RequestMapping(value = "/user", method = RequestMethod.POST)
	public String requestCheck(@RequestParam("hobby") String[] hobbies) {
		logger.info("[POST] - /request/user");
		
		
		return "SUCCESS";
	}
	
	
	// Map 컬렉션 여러 요청 파라미터 가져오기
	
	// 파일 업로드
	
	// 다중 파일 업로드
	
	// 데이터 등록 + 파일 업로드
	
	// ajax 비동기 파일 업로드
}
